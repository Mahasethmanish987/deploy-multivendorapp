name: Deploy to Production

on:
  push:
    branches: [master]

jobs:
  deploy-instance1:
    runs-on: ubuntu-latest
    name: Deploy to Instance 1
    # Request disk space to prevent CI errors
    with:
      disk: 10GB
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Add EC2 Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          for i in {1..5}; do
            ssh-keyscan -H ${{ secrets.EC2_HOST1 }} >> ~/.ssh/known_hosts 2>&1 && {
              echo "‚úÖ SSH keyscan succeeded on attempt $i"
              break
            } || {
              echo "üîÑ SSH keyscan attempt $i failed. Retrying in 3 seconds..."
              sleep 3
            }
          done
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY1 }}
          script: |
            set -e
            echo "üöÄ Starting deployment on Instance 1"
            
            USER="${{ secrets.EC2_USERNAME }}"
            APP_DIR="/home/$USER/foodonline"
            
            # Setup directory
            echo "üìÅ Using directory: $APP_DIR"
            sudo mkdir -p "$APP_DIR"
            sudo chown -R $USER:$USER "$APP_DIR"
            cd "$APP_DIR"
            
            # Repository setup
            if [ ! -d .git ]; then
              git init -q
              git remote add origin https://github.com/Mahasethmanish987/deploy-multivendorapp.git
            fi
            
            # Get latest code
            echo "‚¨áÔ∏è Fetching latest code"
            git fetch origin
            git reset --hard origin/master
            
            # Ensure Docker is available
            echo "üê≥ Verifying Docker environment"
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update -qq
              sudo apt-get install -y docker.io
            fi
            
            # Install Docker Compose if missing
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Start Docker service
            sudo systemctl start docker || true
            sudo systemctl enable docker || true
            
            # Add user to docker group
            if ! groups $USER | grep -q '\bdocker\b'; then
              echo "üë• Adding user to docker group"
              sudo usermod -aG docker $USER
              # Activate group without restarting session
              exec sg docker -c "$0 $@" || true
            fi
            
            # Disk space management
            echo "üßπ Cleaning up disk space before build"
            sudo df -h /
            sudo apt-get clean -y || true
            sudo docker system prune -af || true
            sudo docker volume prune -f || true
            sudo rm -rf /var/lib/apt/lists/* || true
            sudo rm -rf /tmp/* || true
            sudo find /var/log -type f -exec truncate -s 0 {} \; || true
            sudo df -h /
            
            # Deploy application
            echo "üèóÔ∏è Building and starting containers"
            docker-compose down --remove-orphans || true
            docker-compose build --no-cache
            docker-compose up -d --force-recreate
            
            # Health check with diagnostics
            echo "ü©∫ Starting health checks (15s intervals)"
            HEALTHY=false
            for i in {1..10}; do
              sleep 15
              CONTAINER_STATUS=$(docker-compose ps)
              echo "üìä Container status (attempt $i/10):"
              echo "$CONTAINER_STATUS"
              
              if echo "$CONTAINER_STATUS" | grep -q '(healthy)'; then
                echo "‚úÖ Services are healthy"
                HEALTHY=true
                break
              fi
            done
            
            if [ "$HEALTHY" = false ]; then
              echo "‚ùå Services failed to become healthy"
              echo "üìú Displaying container logs:"
              docker-compose logs --tail=100 || true
              echo "üîç Service diagnostics:"
              docker-compose ps -a || true
              docker stats --no-stream || true
              exit 1
            fi
            
            echo "üì¶ Final container status:"
            docker-compose ps -a
            echo "‚úÖ Deployment complete on Instance 1"

  deploy-instance2:
    runs-on: ubuntu-latest
    name: Deploy to Instance 2
    with:
      disk: 10GB
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Add EC2 Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          for i in {1..5}; do
            ssh-keyscan -H ${{ secrets.EC2_HOST2 }} >> ~/.ssh/known_hosts 2>&1 && {
              echo "‚úÖ SSH keyscan succeeded on attempt $i"
              break
            } || {
              echo "üîÑ SSH keyscan attempt $i failed. Retrying in 3 seconds..."
              sleep 3
            }
          done
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            set -e
            echo "üöÄ Starting deployment on Instance 2"
            
            USER="${{ secrets.EC2_USERNAME }}"
            APP_DIR="/home/$USER/foodonline"
            
            # Setup directory
            echo "üìÅ Using directory: $APP_DIR"
            sudo mkdir -p "$APP_DIR"
            sudo chown -R $USER:$USER "$APP_DIR"
            cd "$APP_DIR"
            
            # Repository setup
            if [ ! -d .git ]; then
              git init -q
              git remote add origin https://github.com/Mahasethmanish987/deploy-multivendorapp.git
            fi
            
            # Get latest code
            echo "‚¨áÔ∏è Fetching latest code"
            git fetch origin
            git reset --hard origin/master
            
            # Ensure Docker is available
            echo "üê≥ Verifying Docker environment"
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update -qq
              sudo apt-get install -y docker.io
            fi
            
            # Install Docker Compose if missing
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Start Docker service
            sudo systemctl start docker || true
            sudo systemctl enable docker || true
            
            # Add user to docker group
            if ! groups $USER | grep -q '\bdocker\b'; then
              echo "üë• Adding user to docker group"
              sudo usermod -aG docker $USER
              # Activate group without restarting session
              exec sg docker -c "$0 $@" || true
            fi
            
            # Disk space management
            echo "üßπ Cleaning up disk space before build"
            sudo df -h /
            sudo apt-get clean -y || true
            sudo docker system prune -af || true
            sudo docker volume prune -f || true
            sudo rm -rf /var/lib/apt/lists/* || true
            sudo rm -rf /tmp/* || true
            sudo find /var/log -type f -exec truncate -s 0 {} \; || true
            sudo df -h /
            
            # Deploy application
            echo "üèóÔ∏è Building and starting containers"
            docker-compose down --remove-orphans || true
            docker-compose build --no-cache
            docker-compose up -d --force-recreate
            
            # Health check with diagnostics
            echo "ü©∫ Starting health checks (15s intervals)"
            HEALTHY=false
            for i in {1..10}; do
              sleep 15
              CONTAINER_STATUS=$(docker-compose ps)
              echo "üìä Container status (attempt $i/10):"
              echo "$CONTAINER_STATUS"
              
              if echo "$CONTAINER_STATUS" | grep -q '(healthy)'; then
                echo "‚úÖ Services are healthy"
                HEALTHY=true
                break
              fi
            done
            
            if [ "$HEALTHY" = false ]; then
              echo "‚ùå Services failed to become healthy"
              echo "üìú Displaying container logs:"
              docker-compose logs --tail=100 || true
              echo "üîç Service diagnostics:"
              docker-compose ps -a || true
              docker stats --no-stream || true
              exit 1
            fi
            
            echo "üì¶ Final container status:"
            docker-compose ps -a
            echo "‚úÖ Deployment complete on Instance 2"