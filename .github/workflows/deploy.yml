name: Deploy to Production

on:
  push:
    branches: [master]

jobs:
  deploy-instance1:
    runs-on: ubuntu-latest
    name: Deploy to Instance 1
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Add EC2 Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Add retry logic for SSH keyscan
          for i in {1..5}; do
            ssh-keyscan -H ${{ secrets.EC2_HOST1 }} >> ~/.ssh/known_hosts 2>&1 && {
              echo "✅ SSH keyscan succeeded on attempt $i"
              break
            } || {
              echo "🔄 SSH keyscan attempt $i failed. Retrying in 3 seconds..."
              sleep 3
            }
          done
          
          chmod 600 ~/.ssh/known_hosts
          echo "🔑 Host keys added to known_hosts"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY1 }}
          script: |
            set -e
            echo "🚀 Starting deployment on Instance 1"
            
            # Set environment variables
            USER="${{ secrets.EC2_USERNAME }}"
            APP_DIR="/home/$USER/foodonline"
            
            # Create application directory
            echo "📁 Using directory: $APP_DIR"
            sudo mkdir -p "$APP_DIR"
            sudo chown -R $USER:$USER "$APP_DIR"
            cd "$APP_DIR"
            
            # Initialize Git repository
            if [ ! -d .git ]; then
              echo "🔧 Initializing Git repository"
              git config --global init.defaultBranch master
              git init
              git remote add origin https://github.com/Mahasethmanish987/deploy-multivendorapp.git
            fi
            
            # Fetch latest code
            echo "⬇️ Fetching latest code from repository"
            git fetch origin
            git reset --hard origin/master
            
            # Start Docker service if not running
            if ! sudo systemctl is-active --quiet docker; then
              echo "🐳 Starting Docker service..."
              sudo systemctl start docker
              sudo systemctl enable docker
              sleep 5  # Wait for Docker to start
            fi
            
            # Add user to docker group if needed
            if ! groups $USER | grep -q '\bdocker\b'; then
              echo "👤 Adding user to docker group..."
              sudo usermod -aG docker $USER
              
              # Re-execute script with new group permissions
              echo "🔄 Re-running script with new group permissions"
              exec sg docker -c "$0"
            fi
            
            # Verify Docker environment
            echo "🔍 Docker environment:"
            docker --version
            docker compose version
            
            # Cleanup previous deployment
            echo "🧹 Cleaning up previous deployment"
            docker compose -f docker-compose.yml down --remove-orphans || true
            
            # Build and start new containers
            echo "🏗️ Building and starting containers"
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml up -d --force-recreate
            
            # Health check with retries
            echo "🩺 Performing health check"
            for i in {1..5}; do
              sleep 10
              CONTAINERS_RUNNING=$(docker compose ps -q | wc -l)
              if [ "$CONTAINERS_RUNNING" -gt 0 ] && docker compose ps | grep -q 'Up (healthy)'; then
                echo "✅ Containers are running and healthy"
                break
              else
                echo "🔄 Containers not ready yet (attempt $i/5)"
                docker compose ps
              fi
            done
            
            # Show deployment status
            echo "📦 Container status:"
            docker compose ps -a
            
            echo "📜 Recent logs:"
            docker compose logs -t --tail=50
            
            echo "✅ Deployment complete on Instance 1"

  deploy-instance2:
    runs-on: ubuntu-latest
    name: Deploy to Instance 2
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Add EC2 Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Add retry logic for SSH keyscan
          for i in {1..5}; do
            ssh-keyscan -H ${{ secrets.EC2_HOST2 }} >> ~/.ssh/known_hosts 2>&1 && {
              echo "✅ SSH keyscan succeeded on attempt $i"
              break
            } || {
              echo "🔄 SSH keyscan attempt $i failed. Retrying in 3 seconds..."
              sleep 3
            }
          done
          
          chmod 600 ~/.ssh/known_hosts
          echo "🔑 Host keys added to known_hosts"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            set -e
            echo "🚀 Starting deployment on Instance 2"
            
            # Set environment variables
            USER="${{ secrets.EC2_USERNAME }}"
            APP_DIR="/home/$USER/foodonline"
            
            # Create application directory
            echo "📁 Using directory: $APP_DIR"
            sudo mkdir -p "$APP_DIR"
            sudo chown -R $USER:$USER "$APP_DIR"
            cd "$APP_DIR"
            
            # Initialize Git repository
            if [ ! -d .git ]; then
              echo "🔧 Initializing Git repository"
              git config --global init.defaultBranch master
              git init
              git remote add origin https://github.com/Mahasethmanish987/deploy-multivendorapp.git
            fi
            
            # Fetch latest code
            echo "⬇️ Fetching latest code from repository"
            git fetch origin
            git reset --hard origin/master
            
            # Start Docker service if not running
            if ! sudo systemctl is-active --quiet docker; then
              echo "🐳 Starting Docker service..."
              sudo systemctl start docker
              sudo systemctl enable docker
              sleep 5  # Wait for Docker to start
            fi
            
            # Add user to docker group if needed
            if ! groups $USER | grep -q '\bdocker\b'; then
              echo "👤 Adding user to docker group..."
              sudo usermod -aG docker $USER
              
              # Re-execute script with new group permissions
              echo "🔄 Re-running script with new group permissions"
              exec sg docker -c "$0"
            fi
            
            # Verify Docker environment
            echo "🔍 Docker environment:"
            docker --version
            docker compose version
            
            # Cleanup previous deployment
            echo "🧹 Cleaning up previous deployment"
            docker compose -f docker-compose-tier.yml down --remove-orphans || true
            
            # Build and start new containers
            echo "🏗️ Building and starting containers"
            docker compose -f docker-compose-tier.yml build --no-cache
            docker compose -f docker-compose-tier.yml up -d --force-recreate
            
            # Health check with retries
            echo "🩺 Performing health check"
            for i in {1..5}; do
              sleep 10
              CONTAINERS_RUNNING=$(docker compose -f docker-compose-tier.yml ps -q | wc -l)
              if [ "$CONTAINERS_RUNNING" -gt 0 ] && docker compose -f docker-compose-tier.yml ps | grep -q 'Up (healthy)'; then
                echo "✅ Containers are running and healthy"
                break
              else
                echo "🔄 Containers not ready yet (attempt $i/5)"
                docker compose -f docker-compose-tier.yml ps
              fi
            done
            
            # Show deployment status
            echo "📦 Container status:"
            docker compose -f docker-compose-tier.yml ps -a
            
            echo "📜 Recent logs:"
            docker compose -f docker-compose-tier.yml logs -t --tail=50
            
            echo "✅ Deployment complete on Instance 2"