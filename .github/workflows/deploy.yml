name: Deploy to Production

on:
  push:
    branches: [master]

env:
  APP_DIR: /home/${{ secrets.EC2_USERNAME }}/foodonline
  REPO_URL: https://github.com/Mahasethmanish987/deploy-multivendorapp.git

jobs:
  deploy-instance1:
    runs-on: ubuntu-latest
    name: Deploy to Instance 1
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Add EC2 Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST1 }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY1 }}
          script: |
            set -e
            echo "üöÄ Starting deployment on Instance 1"
            
            # Setup directory
            sudo mkdir -p ${{ env.APP_DIR }}
            sudo chown -R $USER:$USER ${{ env.APP_DIR }}
            cd ${{ env.APP_DIR }}
            
            # Clone or update repository
            if [ ! -d .git ]; then
              git clone ${{ env.REPO_URL }} .
            else
              git fetch --all
              git reset --hard origin/master
            fi
            
            # Install Docker Compose if missing
            if ! docker compose version &>/dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi
            
            # Verify Docker environment
            docker --version
            docker compose version
            
            # Deploy containers
            docker compose -f docker-compose.yml down --remove-orphans || true
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml up -d --force-recreate
            
            # Health check with retries
            for i in {1..5}; do
              sleep 10
              if docker compose ps | grep -q 'running'; then
                echo "üì¶ Containers running:"
                docker compose ps
                echo "‚úÖ Deployment successful on Instance 1"
                exit 0
              fi
            done
            
            echo "‚ùå Deployment failed - containers not starting"
            docker compose logs
            exit 1

  deploy-instance2:
    runs-on: ubuntu-latest
    name: Deploy to Instance 2
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Add EC2 Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST2 }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            set -e
            echo "üöÄ Starting deployment on Instance 2"
            
            # Setup directory
            sudo mkdir -p ${{ env.APP_DIR }}
            sudo chown -R $USER:$USER ${{ env.APP_DIR }}
            cd ${{ env.APP_DIR }}
            
            # Clone or update repository
            if [ ! -d .git ]; then
              git clone ${{ env.REPO_URL }} .
            else
              git fetch --all
              git reset --hard origin/master
            fi
            
            # Install Docker Compose if missing
            if ! docker compose version &>/dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi
            
            # Verify Docker environment
            docker --version
            docker compose version
            
            # Deploy containers
            docker compose -f docker-compose-tier.yml down --remove-orphans || true
            docker compose -f docker-compose-tier.yml build --no-cache
            docker compose -f docker-compose-tier.yml up -d --force-recreate
            
            # Health check with retries
            for i in {1..5}; do
              sleep 10
              if docker compose -f docker-compose-tier.yml ps | grep -q 'running'; then
                echo "üì¶ Containers running:"
                docker compose -f docker-compose-tier.yml ps
                echo "‚úÖ Deployment successful on Instance 2"
                exit 0
              fi
            done
            
            echo "‚ùå Deployment failed - containers not starting"
            docker compose -f docker-compose-tier.yml logs
            exit 1