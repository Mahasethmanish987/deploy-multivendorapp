name: Deploy to Production

on:
  push:
    branches: [master]

jobs:
  deploy-instance1:
    runs-on: ubuntu-latest
    name: Deploy to Instance 1
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Add EC2 Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST1 }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0  # Updated to latest version
        with:
          host: ${{ secrets.EC2_HOST1 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY1 }}
          script: |
            set -e  # Fail on error
            echo "üöÄ Starting deployment on Instance 1"
            
            # Create directory
            mkdir -p /home/$USER/foodonline
            cd /home/$USER/foodonline
            
            # Initialize Git if needed
            if [ ! -d .git ]; then
              git init
              git remote add origin https://github.com/Mahasethmanish987/deploy-multivendorapp.git
            fi
            
            # Get latest code
            git fetch origin
            git reset --hard origin/master
            
            # Ensure Docker Compose is available
            if ! docker compose version &>/dev/null; then
              echo "Installing Docker Compose plugin..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
              sudo usermod -aG docker $USER
              newgrp docker
            fi
            
            # Verify Docker Compose version
            docker compose version
            
            # Cleanup previous deployment
            docker compose -f docker-compose.yml down --remove-orphans || true
            docker system prune -af --volumes
            
            # Build and deploy
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml up -d --force-recreate
            
            # Health check
            sleep 10
            echo "üì¶ Container status:"
            docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"
            echo "üîç Recent logs:"
            docker compose -f docker-compose.yml logs -t --tail=100
            echo "‚úÖ Deployment complete on Instance 1"

  deploy-instance2:
    runs-on: ubuntu-latest
    name: Deploy to Instance 2
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Add EC2 Host to Known Hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST2 }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0  # Updated to latest version
        with:
          host: ${{ secrets.EC2_HOST2 }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            set -e  # Fail on error
            echo "üöÄ Starting deployment on Instance 2"
            
            # Create directory
            mkdir -p /home/$USER/foodonline
            cd /home/$USER/foodonline
            
            # Initialize Git if needed
            if [ ! -d .git ]; then
              git init
              git remote add origin https://github.com/Mahasethmanish987/deploy-multivendorapp.git
            fi
            
            # Get latest code
            git fetch origin
            git reset --hard origin/master
            
            # Ensure Docker Compose is available
            if ! docker compose version &>/dev/null; then
              echo "Installing Docker Compose plugin..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
              sudo usermod -aG docker $USER
              newgrp docker
            fi
            
            # Verify Docker Compose version
            docker compose version
            
            # Cleanup previous deployment
            docker compose -f docker-compose-tier.yml down --remove-orphans || true
            docker system prune -af --volumes
            
            # Build and deploy
            docker compose -f docker-compose-tier.yml build --no-cache
            docker compose -f docker-compose-tier.yml up -d --force-recreate
            
            # Health check
            sleep 10
            echo "üì¶ Container status:"
            docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"
            echo "üîç Recent logs:"
            docker compose -f docker-compose-tier.yml logs -t --tail=100
            echo "‚úÖ Deployment complete on Instance 2"